
decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002b40  08002b40  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b40  08002b40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000060  08002ba8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002ba8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aab4  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ba  00000000  00000000  0002ab3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017254  00000000  00000000  0002dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b26a  00000000  00000000  00044d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fc7  00000000  00000000  0004ff76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000d7f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002b00 	.word	0x08002b00

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc3e 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f942 	bl	80003e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f856 	bl	800020c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f914 	bl	800038c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8c6 	bl	80002f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000168:	2100      	movs	r1, #0
 800016a:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016c:	f001 fc9a 	bl	8001aa4 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unlock();
 8000170:	f000 fa9e 	bl	80006b0 <unlock>
  HAL_Delay(5000);
 8000174:	f241 3088 	movw	r0, #5000	; 0x1388
 8000178:	f000 fc8c 	bl	8000a94 <HAL_Delay>
  lock();
 800017c:	f000 fac6 	bl	800070c <lock>
  while (1)
 8000180:	e7fe      	b.n	8000180 <main+0x34>
 8000182:	bf00      	nop
 8000184:	200000c8 	.word	0x200000c8

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fcaa 	bl	8002af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2302      	movs	r3, #2
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b2:	2310      	movs	r3, #16
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b6:	2302      	movs	r3, #2
 80001b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ba:	2300      	movs	r3, #0
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001be:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 ff3f 	bl	800104c <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d4:	f000 faba 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 f9aa 	bl	800154c <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001fe:	f000 faa5 	bl	800074c <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	; 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08a      	sub	sp, #40	; 0x28
 8000210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800022a:	463b      	mov	r3, r7
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000236:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000238:	4a2d      	ldr	r2, [pc, #180]	; (80002f0 <MX_TIM1_Init+0xe4>)
 800023a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800023c:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <MX_TIM1_Init+0xe0>)
 800023e:	223f      	movs	r2, #63	; 0x3f
 8000240:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000242:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000248:	4b28      	ldr	r3, [pc, #160]	; (80002ec <MX_TIM1_Init+0xe0>)
 800024a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800024e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000258:	2200      	movs	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800025c:	4b23      	ldr	r3, [pc, #140]	; (80002ec <MX_TIM1_Init+0xe0>)
 800025e:	2200      	movs	r2, #0
 8000260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000262:	4822      	ldr	r0, [pc, #136]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000264:	f001 fb0c 	bl	8001880 <HAL_TIM_Base_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800026e:	f000 fa6d 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000276:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4619      	mov	r1, r3
 800027e:	481b      	ldr	r0, [pc, #108]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000280:	f001 feaa 	bl	8001fd8 <HAL_TIM_ConfigClockSource>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800028a:	f000 fa5f 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800028e:	4817      	ldr	r0, [pc, #92]	; (80002ec <MX_TIM1_Init+0xe0>)
 8000290:	f001 fbb0 	bl	80019f4 <HAL_TIM_IC_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800029a:	f000 fa57 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	4619      	mov	r1, r3
 80002ac:	480f      	ldr	r0, [pc, #60]	; (80002ec <MX_TIM1_Init+0xe0>)
 80002ae:	f002 f9d9 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80002b8:	f000 fa48 	bl	800074c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80002c0:	2301      	movs	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	4806      	ldr	r0, [pc, #24]	; (80002ec <MX_TIM1_Init+0xe0>)
 80002d4:	f001 fdec 	bl	8001eb0 <HAL_TIM_IC_ConfigChannel>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80002de:	f000 fa35 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	; 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	200000c8 	.word	0x200000c8
 80002f0:	40012c00 	.word	0x40012c00

080002f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_TIM2_Init+0x94>)
 8000312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_TIM2_Init+0x94>)
 800031a:	2240      	movs	r2, #64	; 0x40
 800031c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_TIM2_Init+0x94>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_TIM2_Init+0x94>)
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_TIM2_Init+0x94>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_TIM2_Init+0x94>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000338:	4813      	ldr	r0, [pc, #76]	; (8000388 <MX_TIM2_Init+0x94>)
 800033a:	f001 faa1 	bl	8001880 <HAL_TIM_Base_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000344:	f000 fa02 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <MX_TIM2_Init+0x94>)
 8000356:	f001 fe3f 	bl	8001fd8 <HAL_TIM_ConfigClockSource>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000360:	f000 f9f4 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000364:	2300      	movs	r3, #0
 8000366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_TIM2_Init+0x94>)
 8000372:	f002 f977 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800037c:	f000 f9e6 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000110 	.word	0x20000110

0800038c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_USART1_UART_Init+0x50>)
 8000394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f002 f9b8 	bl	8002738 <HAL_UART_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ce:	f000 f9bd 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000084 	.word	0x20000084
 80003dc:	40013800 	.word	0x40013800

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MX_GPIO_Init+0xa0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a21      	ldr	r2, [pc, #132]	; (8000480 <MX_GPIO_Init+0xa0>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0xa0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <MX_GPIO_Init+0xa0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <MX_GPIO_Init+0xa0>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_GPIO_Init+0xa0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042a:	4816      	ldr	r0, [pc, #88]	; (8000484 <MX_GPIO_Init+0xa4>)
 800042c:	f000 fdde 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : input_Pin */
  GPIO_InitStruct.Pin = input_Pin;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000438:	2302      	movs	r3, #2
 800043a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(input_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4619      	mov	r1, r3
 8000442:	4812      	ldr	r0, [pc, #72]	; (800048c <MX_GPIO_Init+0xac>)
 8000444:	f000 fc58 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : output_Pin */
  GPIO_InitStruct.Pin = output_Pin;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000452:	2302      	movs	r3, #2
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(output_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	4619      	mov	r1, r3
 8000460:	4808      	ldr	r0, [pc, #32]	; (8000484 <MX_GPIO_Init+0xa4>)
 8000462:	f000 fc49 	bl	8000cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2006      	movs	r0, #6
 800046c:	f000 fc0d 	bl	8000c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000470:	2006      	movs	r0, #6
 8000472:	f000 fc26 	bl	8000cc2 <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40010c00 	.word	0x40010c00
 8000488:	10310000 	.word	0x10310000
 800048c:	40010800 	.word	0x40010800

08000490 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{/*
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	80fb      	strh	r3, [r7, #6]
		{
			//HAL_TIM_R
		}
	}
	*/
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	static uint8_t capture_cnt=0;
	static uint32_t high=0;
	char data[2];
	if(htim->Instance==TIM1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a3e      	ldr	r2, [pc, #248]	; (80005ac <HAL_TIM_IC_CaptureCallback+0x108>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d175      	bne.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
	{
		if(capture_cnt==0)
 80004b6:	4b3e      	ldr	r3, [pc, #248]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d152      	bne.n	8000564 <HAL_TIM_IC_CaptureCallback+0xc0>
		{
			capture_cnt=1;
 80004be:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
			int32_t delta_t=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80004c4:	2100      	movs	r1, #0
 80004c6:	483b      	ldr	r0, [pc, #236]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004c8:	f001 fe4a 	bl	8002160 <HAL_TIM_ReadCapturedValue>
 80004cc:	4603      	mov	r3, r0
 80004ce:	613b      	str	r3, [r7, #16]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004d0:	4b38      	ldr	r3, [pc, #224]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
			//printf("low: %u\r\n", delta_t);
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6a1a      	ldr	r2, [r3, #32]
 80004de:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f022 020a 	bic.w	r2, r2, #10
 80004e6:	621a      	str	r2, [r3, #32]
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6a1a      	ldr	r2, [r3, #32]
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f042 0202 	orr.w	r2, r2, #2
 80004f6:	621a      	str	r2, [r3, #32]
			if((delta_t>250)&&(delta_t<300))
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	2bfa      	cmp	r3, #250	; 0xfa
 80004fc:	dd17      	ble.n	800052e <HAL_TIM_IC_CaptureCallback+0x8a>
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000504:	da13      	bge.n	800052e <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				if((high>800)&&(high<900))
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800050e:	d947      	bls.n	80005a0 <HAL_TIM_IC_CaptureCallback+0xfc>
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000518:	d242      	bcs.n	80005a0 <HAL_TIM_IC_CaptureCallback+0xfc>
				{
					data[0]='1';
 800051a:	2331      	movs	r3, #49	; 0x31
 800051c:	733b      	strb	r3, [r7, #12]
					HAL_UART_Transmit(&huart1, data, 1, 10);
 800051e:	f107 010c 	add.w	r1, r7, #12
 8000522:	230a      	movs	r3, #10
 8000524:	2201      	movs	r2, #1
 8000526:	4825      	ldr	r0, [pc, #148]	; (80005bc <HAL_TIM_IC_CaptureCallback+0x118>)
 8000528:	f002 f953 	bl	80027d2 <HAL_UART_Transmit>
				if((high>800)&&(high<900))
 800052c:	e038      	b.n	80005a0 <HAL_TIM_IC_CaptureCallback+0xfc>
				}
			}
			else if((delta_t>800)&&(delta_t<900))
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000534:	dd35      	ble.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800053c:	da31      	bge.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
			{
				if((high>250)&&(high<300))
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2bfa      	cmp	r3, #250	; 0xfa
 8000544:	d92d      	bls.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800054e:	d228      	bcs.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
				{
					data[0]='0';
 8000550:	2330      	movs	r3, #48	; 0x30
 8000552:	733b      	strb	r3, [r7, #12]

					HAL_UART_Transmit(&huart1, data, 1, 10);
 8000554:	f107 010c 	add.w	r1, r7, #12
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <HAL_TIM_IC_CaptureCallback+0x118>)
 800055e:	f002 f938 	bl	80027d2 <HAL_UART_Transmit>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			high=delta_t;
		}
	}
}
 8000562:	e01e      	b.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
			capture_cnt=0;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
			uint32_t delta_t=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4811      	ldr	r0, [pc, #68]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 800056e:	f001 fdf7 	bl	8002160 <HAL_TIM_ReadCapturedValue>
 8000572:	6178      	str	r0, [r7, #20]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 020a 	bic.w	r2, r2, #10
 800058a:	621a      	str	r2, [r3, #32]
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a12      	ldr	r2, [r2, #32]
 8000596:	621a      	str	r2, [r3, #32]
			high=delta_t;
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0x114>)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	e000      	b.n	80005a2 <HAL_TIM_IC_CaptureCallback+0xfe>
				if((high>800)&&(high<900))
 80005a0:	bf00      	nop
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40012c00 	.word	0x40012c00
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	20000080 	.word	0x20000080
 80005bc:	20000084 	.word	0x20000084

080005c0 <command_send>:

void command_send(uint8_t* cmd)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<25;i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e013      	b.n	80005f6 <command_send+0x36>
	{
		switch (cmd[i])
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <command_send+0x20>
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <command_send+0x26>
 80005de:	e005      	b.n	80005ec <command_send+0x2c>
		{
		case 0:
			command_send_low();
 80005e0:	f000 f82c 	bl	800063c <command_send_low>
			break;
 80005e4:	e004      	b.n	80005f0 <command_send+0x30>
		case 1:
			command_send_high();
 80005e6:	f000 f80f 	bl	8000608 <command_send_high>
			break;
 80005ea:	e001      	b.n	80005f0 <command_send+0x30>
		default:
			command_send_low();
 80005ec:	f000 f826 	bl	800063c <command_send_low>
	for(uint8_t i=0;i<25;i++)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	3301      	adds	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b18      	cmp	r3, #24
 80005fa:	d9e8      	bls.n	80005ce <command_send+0xe>
		}
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <command_send_high>:
void command_send_high()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <command_send_high+0x30>)
 8000614:	f000 fcea 	bl	8000fec <HAL_GPIO_WritePin>
	delay_us(840);
 8000618:	f44f 7052 	mov.w	r0, #840	; 0x348
 800061c:	f000 f828 	bl	8000670 <delay_us>
	HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <command_send_high+0x30>)
 8000628:	f000 fce0 	bl	8000fec <HAL_GPIO_WritePin>
	delay_us(275);
 800062c:	f240 1013 	movw	r0, #275	; 0x113
 8000630:	f000 f81e 	bl	8000670 <delay_us>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010c00 	.word	0x40010c00

0800063c <command_send_low>:
void command_send_low()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <command_send_low+0x30>)
 8000648:	f000 fcd0 	bl	8000fec <HAL_GPIO_WritePin>
	delay_us(275);
 800064c:	f240 1013 	movw	r0, #275	; 0x113
 8000650:	f000 f80e 	bl	8000670 <delay_us>
	HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <command_send_low+0x30>)
 800065c:	f000 fcc6 	bl	8000fec <HAL_GPIO_WritePin>
	delay_us(860);
 8000660:	f44f 7057 	mov.w	r0, #860	; 0x35c
 8000664:	f000 f804 	bl	8000670 <delay_us>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010c00 	.word	0x40010c00

08000670 <delay_us>:
void delay_us(uint16_t num)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
	uint16_t now=0;
 800067a:	2300      	movs	r3, #0
 800067c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <delay_us+0x3c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <delay_us+0x3c>)
 8000688:	f001 f94a 	bl	8001920 <HAL_TIM_Base_Start>
	while(now<num)
 800068c:	e003      	b.n	8000696 <delay_us+0x26>
	{
		now=__HAL_TIM_GET_COUNTER(&htim2);
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <delay_us+0x3c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	81fb      	strh	r3, [r7, #14]
	while(now<num)
 8000696:	89fa      	ldrh	r2, [r7, #14]
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3f7      	bcc.n	800068e <delay_us+0x1e>
	}
	HAL_TIM_Base_Stop(&htim2);
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <delay_us+0x3c>)
 80006a0:	f001 f982 	bl	80019a8 <HAL_TIM_Base_Stop>
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000110 	.word	0x20000110

080006b0 <unlock>:
void unlock()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	command_send(key_unlock);
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <unlock+0x54>)
 80006b6:	f7ff ff83 	bl	80005c0 <command_send>
	delay_us(8800);
 80006ba:	f242 2060 	movw	r0, #8800	; 0x2260
 80006be:	f7ff ffd7 	bl	8000670 <delay_us>
	command_send(key_unlock);
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <unlock+0x54>)
 80006c4:	f7ff ff7c 	bl	80005c0 <command_send>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f000 f9e2 	bl	8000a94 <HAL_Delay>
	command_send(key_aa);
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <unlock+0x58>)
 80006d2:	f7ff ff75 	bl	80005c0 <command_send>
	delay_us(8800);
 80006d6:	f242 2060 	movw	r0, #8800	; 0x2260
 80006da:	f7ff ffc9 	bl	8000670 <delay_us>
	command_send(key_aa);
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <unlock+0x58>)
 80006e0:	f7ff ff6e 	bl	80005c0 <command_send>
	HAL_Delay(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f000 f9d4 	bl	8000a94 <HAL_Delay>
	command_send(key_aa);
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <unlock+0x58>)
 80006ee:	f7ff ff67 	bl	80005c0 <command_send>
	delay_us(8800);
 80006f2:	f242 2060 	movw	r0, #8800	; 0x2260
 80006f6:	f7ff ffbb 	bl	8000670 <delay_us>
	command_send(key_aa);
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <unlock+0x58>)
 80006fc:	f7ff ff60 	bl	80005c0 <command_send>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000038 	.word	0x20000038
 8000708:	20000000 	.word	0x20000000

0800070c <lock>:
void lock()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	command_send(key_unlock);
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <lock+0x38>)
 8000712:	f7ff ff55 	bl	80005c0 <command_send>
	delay_us(8800);
 8000716:	f242 2060 	movw	r0, #8800	; 0x2260
 800071a:	f7ff ffa9 	bl	8000670 <delay_us>
	command_send(key_unlock);
 800071e:	4809      	ldr	r0, [pc, #36]	; (8000744 <lock+0x38>)
 8000720:	f7ff ff4e 	bl	80005c0 <command_send>
	HAL_Delay(3000);
 8000724:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000728:	f000 f9b4 	bl	8000a94 <HAL_Delay>
	command_send(key_lock);
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <lock+0x3c>)
 800072e:	f7ff ff47 	bl	80005c0 <command_send>
	delay_us(8800);
 8000732:	f242 2060 	movw	r0, #8800	; 0x2260
 8000736:	f7ff ff9b 	bl	8000670 <delay_us>
	command_send(key_lock);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <lock+0x3c>)
 800073c:	f7ff ff40 	bl	80005c0 <command_send>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000038 	.word	0x20000038
 8000748:	2000001c 	.word	0x2000001c

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_MspInit+0x5c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x5c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_MspInit+0x60>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_MspInit+0x60>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000

080007bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <HAL_TIM_Base_MspInit+0xa8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d12d      	bne.n	8000838 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 80007e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4619      	mov	r1, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <HAL_TIM_Base_MspInit+0xb0>)
 8000822:	f000 fa69 	bl	8000cf8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201b      	movs	r0, #27
 800082c:	f000 fa2d 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000830:	201b      	movs	r0, #27
 8000832:	f000 fa46 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000836:	e010      	b.n	800085a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d10b      	bne.n	800085a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_TIM_Base_MspInit+0xac>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40012c00 	.word	0x40012c00
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_UART_MspInit+0x8c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d131      	bne.n	80008f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x90>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <HAL_UART_MspInit+0x90>)
 8000896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x90>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x90>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x90>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_UART_MspInit+0x94>)
 80008d6:	f000 fa0f 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_UART_MspInit+0x94>)
 80008f0:	f000 fa02 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f885 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(input_Pin);
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fb5e 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM1_CC_IRQHandler+0x10>)
 800096a:	f001 f999 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000c8 	.word	0x200000c8

08000978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009aa:	f7ff ffe5 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f002 f87b 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fbcb 	bl	800014c <main>
  bx lr
 80009b6:	4770      	bx	lr
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009c0:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 80009c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009c8:	2000015c 	.word	0x2000015c

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f947 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff feb4 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f95f 	bl	8000cde <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f927 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000054 	.word	0x20000054
 8000a54:	2000005c 	.word	0x2000005c
 8000a58:	20000058 	.word	0x20000058

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	2000005c 	.word	0x2000005c
 8000a7c:	20000158 	.word	0x20000158

08000a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000158 	.word	0x20000158

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff fff0 	bl	8000a80 <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000005c 	.word	0x2000005c

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4906      	ldr	r1, [pc, #24]	; (8000b74 <__NVIC_EnableIRQ+0x34>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff90 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff2d 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff42 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff90 	bl	8000bcc <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5f 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff35 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa2 	bl	8000c30 <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e148      	b.n	8000f9e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8137 	bne.w	8000f98 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4aa3      	ldr	r2, [pc, #652]	; (8000fbc <HAL_GPIO_Init+0x2c4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d05e      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
 8000d34:	4aa1      	ldr	r2, [pc, #644]	; (8000fbc <HAL_GPIO_Init+0x2c4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d875      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d3a:	4aa1      	ldr	r2, [pc, #644]	; (8000fc0 <HAL_GPIO_Init+0x2c8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d058      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
 8000d40:	4a9f      	ldr	r2, [pc, #636]	; (8000fc0 <HAL_GPIO_Init+0x2c8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d86f      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d46:	4a9f      	ldr	r2, [pc, #636]	; (8000fc4 <HAL_GPIO_Init+0x2cc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d052      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
 8000d4c:	4a9d      	ldr	r2, [pc, #628]	; (8000fc4 <HAL_GPIO_Init+0x2cc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d869      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d52:	4a9d      	ldr	r2, [pc, #628]	; (8000fc8 <HAL_GPIO_Init+0x2d0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d04c      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
 8000d58:	4a9b      	ldr	r2, [pc, #620]	; (8000fc8 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d863      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d5e:	4a9b      	ldr	r2, [pc, #620]	; (8000fcc <HAL_GPIO_Init+0x2d4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d046      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
 8000d64:	4a99      	ldr	r2, [pc, #612]	; (8000fcc <HAL_GPIO_Init+0x2d4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d85d      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d82a      	bhi.n	8000dc4 <HAL_GPIO_Init+0xcc>
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d859      	bhi.n	8000e26 <HAL_GPIO_Init+0x12e>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <HAL_GPIO_Init+0x80>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000df3 	.word	0x08000df3
 8000d7c:	08000dcd 	.word	0x08000dcd
 8000d80:	08000ddf 	.word	0x08000ddf
 8000d84:	08000e21 	.word	0x08000e21
 8000d88:	08000e27 	.word	0x08000e27
 8000d8c:	08000e27 	.word	0x08000e27
 8000d90:	08000e27 	.word	0x08000e27
 8000d94:	08000e27 	.word	0x08000e27
 8000d98:	08000e27 	.word	0x08000e27
 8000d9c:	08000e27 	.word	0x08000e27
 8000da0:	08000e27 	.word	0x08000e27
 8000da4:	08000e27 	.word	0x08000e27
 8000da8:	08000e27 	.word	0x08000e27
 8000dac:	08000e27 	.word	0x08000e27
 8000db0:	08000e27 	.word	0x08000e27
 8000db4:	08000e27 	.word	0x08000e27
 8000db8:	08000e27 	.word	0x08000e27
 8000dbc:	08000dd5 	.word	0x08000dd5
 8000dc0:	08000de9 	.word	0x08000de9
 8000dc4:	4a82      	ldr	r2, [pc, #520]	; (8000fd0 <HAL_GPIO_Init+0x2d8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dca:	e02c      	b.n	8000e26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	623b      	str	r3, [r7, #32]
          break;
 8000dd2:	e029      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	623b      	str	r3, [r7, #32]
          break;
 8000ddc:	e024      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	3308      	adds	r3, #8
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e01f      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	330c      	adds	r3, #12
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e01a      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e013      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	611a      	str	r2, [r3, #16]
          break;
 8000e12:	e009      	b.n	8000e28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2308      	movs	r3, #8
 8000e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	615a      	str	r2, [r3, #20]
          break;
 8000e1e:	e003      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	e000      	b.n	8000e28 <HAL_GPIO_Init+0x130>
          break;
 8000e26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d801      	bhi.n	8000e32 <HAL_GPIO_Init+0x13a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	e001      	b.n	8000e36 <HAL_GPIO_Init+0x13e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3304      	adds	r3, #4
 8000e36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2bff      	cmp	r3, #255	; 0xff
 8000e3c:	d802      	bhi.n	8000e44 <HAL_GPIO_Init+0x14c>
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x152>
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	3b08      	subs	r3, #8
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	210f      	movs	r1, #15
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	6a39      	ldr	r1, [r7, #32]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8090 	beq.w	8000f98 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x2dc>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_GPIO_Init+0x2dc>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_GPIO_Init+0x2dc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x2e0>)
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <HAL_GPIO_Init+0x2e4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e0>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1dc>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1d8>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_Init+0x1e2>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x1e2>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0x1e2>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4093      	lsls	r3, r2
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eea:	493b      	ldr	r1, [pc, #236]	; (8000fd8 <HAL_GPIO_Init+0x2e0>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f04:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	492d      	ldr	r1, [pc, #180]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4929      	ldr	r1, [pc, #164]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4923      	ldr	r1, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	491f      	ldr	r1, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4919      	ldr	r1, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f47f aeaf 	bne.w	8000d0c <HAL_GPIO_Init+0x14>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	372c      	adds	r7, #44	; 0x2c
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	10320000 	.word	0x10320000
 8000fc0:	10310000 	.word	0x10310000
 8000fc4:	10220000 	.word	0x10220000
 8000fc8:	10210000 	.word	0x10210000
 8000fcc:	10120000 	.word	0x10120000
 8000fd0:	10110000 	.word	0x10110000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	611a      	str	r2, [r3, #16]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa28 	bl	8000490 <HAL_GPIO_EXTI_Callback>
  }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e26c      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800106c:	4b92      	ldr	r3, [pc, #584]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00c      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	4b8f      	ldr	r3, [pc, #572]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d112      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 8001084:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <HAL_RCC_OscConfig+0x12c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d168      	bne.n	8001178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e246      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x76>
 80010b4:	4b80      	ldr	r3, [pc, #512]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7a      	ldr	r2, [pc, #488]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a77      	ldr	r2, [pc, #476]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0xbc>
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a71      	ldr	r2, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 8001108:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6a      	ldr	r2, [pc, #424]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fcaa 	bl	8000a80 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fca6 	bl	8000a80 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1fa      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xe4>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fc96 	bl	8000a80 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fc92 	bl	8000a80 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1e6      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x10c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1ba      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4939      	ldr	r1, [pc, #228]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc4b 	bl	8000a80 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc47 	bl	8000a80 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e19b      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4927      	ldr	r1, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc2a 	bl	8000a80 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc26 	bl	8000a80 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e17a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d019      	beq.n	8001296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fc0a 	bl	8000a80 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc06 	bl	8000a80 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e15a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fad8 	bl	8001844 <RCC_Delay>
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fbf0 	bl	8000a80 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbec 	bl	8000a80 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d908      	bls.n	80012c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e140      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	42420000 	.word	0x42420000
 80012c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e9      	bne.n	80012a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a6 	beq.w	800142a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b97      	ldr	r3, [pc, #604]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b94      	ldr	r3, [pc, #592]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a93      	ldr	r2, [pc, #588]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fbad 	bl	8000a80 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff fba9 	bl	8000a80 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0fd      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x312>
 8001350:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e02d      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x334>
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a75      	ldr	r2, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x356>
 8001388:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a6c      	ldr	r2, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a69      	ldr	r2, [pc, #420]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a63      	ldr	r2, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb5d 	bl	8000a80 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fb59 	bl	8000a80 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0ab      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x37e>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb47 	bl	8000a80 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb43 	bl	8000a80 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e095      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8081 	beq.w	8001536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d061      	beq.n	8001504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d146      	bne.n	80014d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fb17 	bl	8000a80 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fb13 	bl	8000a80 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e067      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a19      	ldr	r1, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	430b      	orrs	r3, r1
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fae7 	bl	8000a80 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fae3 	bl	8000a80 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e037      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46a>
 80014d4:	e02f      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fad0 	bl	8000a80 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff facc 	bl	8000a80 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e020      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x498>
 8001502:	e018      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e013      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	40007000 	.word	0x40007000
 8001548:	42420060 	.word	0x42420060

0800154c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d0      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4965      	ldr	r1, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e073      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fa20 	bl	8000a80 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa1c 	bl	8000a80 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e053      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d210      	bcs.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1cc>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f97e 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	08002b28 	.word	0x08002b28
 8001718:	20000054 	.word	0x20000054
 800171c:	20000058 	.word	0x20000058

08001720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b490      	push	{r4, r7}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001728:	1d3c      	adds	r4, r7, #4
 800172a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001730:	f240 2301 	movw	r3, #513	; 0x201
 8001734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 800175a:	2b08      	cmp	r3, #8
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x46>
 800175e:	e02d      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001762:	623b      	str	r3, [r7, #32]
      break;
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001772:	4413      	add	r3, r2
 8001774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001792:	4413      	add	r3, r2
 8001794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179e:	fb02 f203 	mul.w	r2, r2, r3
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e004      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	623b      	str	r3, [r7, #32]
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	623b      	str	r3, [r7, #32]
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	6a3b      	ldr	r3, [r7, #32]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc90      	pop	{r4, r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	08002b18 	.word	0x08002b18
 80017d4:	40021000 	.word	0x40021000
 80017d8:	007a1200 	.word	0x007a1200
 80017dc:	003d0900 	.word	0x003d0900

080017e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000054 	.word	0x20000054

080017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f8:	f7ff fff2 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	4903      	ldr	r1, [pc, #12]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	08002b38 	.word	0x08002b38

0800181c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001820:	f7ff ffde 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4903      	ldr	r1, [pc, #12]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	08002b38 	.word	0x08002b38

08001844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <RCC_Delay+0x34>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <RCC_Delay+0x38>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0a5b      	lsrs	r3, r3, #9
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001860:	bf00      	nop
  }
  while (Delay --);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <RCC_Delay+0x1c>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000054 	.word	0x20000054
 800187c:	10624dd3 	.word	0x10624dd3

08001880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e041      	b.n	8001916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ff88 	bl	80007bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f000 fcb6 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d001      	beq.n	8001938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e02d      	b.n	8001994 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_TIM_Base_Start+0x80>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_TIM_Base_Start+0x3e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001952:	d004      	beq.n	800195e <HAL_TIM_Base_Start+0x3e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_TIM_Base_Start+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d111      	bne.n	8001982 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b06      	cmp	r3, #6
 800196e:	d010      	beq.n	8001992 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001980:	e007      	b.n	8001992 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40000400 	.word	0x40000400

080019a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10f      	bne.n	80019e0 <HAL_TIM_Base_Stop+0x38>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a1a      	ldr	r2, [r3, #32]
 80019c6:	f240 4344 	movw	r3, #1092	; 0x444
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_TIM_Base_Stop+0x38>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e041      	b.n	8001a8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f839 	bl	8001a92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f000 fbfc 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_IC_Start_IT+0x1a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	e013      	b.n	8001ae6 <HAL_TIM_IC_Start_IT+0x42>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d104      	bne.n	8001ace <HAL_TIM_IC_Start_IT+0x2a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e00b      	b.n	8001ae6 <HAL_TIM_IC_Start_IT+0x42>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d104      	bne.n	8001ade <HAL_TIM_IC_Start_IT+0x3a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e003      	b.n	8001ae6 <HAL_TIM_IC_Start_IT+0x42>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <HAL_TIM_IC_Start_IT+0x54>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e013      	b.n	8001b20 <HAL_TIM_IC_Start_IT+0x7c>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d104      	bne.n	8001b08 <HAL_TIM_IC_Start_IT+0x64>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e00b      	b.n	8001b20 <HAL_TIM_IC_Start_IT+0x7c>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d104      	bne.n	8001b18 <HAL_TIM_IC_Start_IT+0x74>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e003      	b.n	8001b20 <HAL_TIM_IC_Start_IT+0x7c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0ae      	b.n	8001c90 <HAL_TIM_IC_Start_IT+0x1ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_IC_Start_IT+0x9e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b40:	e013      	b.n	8001b6a <HAL_TIM_IC_Start_IT+0xc6>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_IC_Start_IT+0xae>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b50:	e00b      	b.n	8001b6a <HAL_TIM_IC_Start_IT+0xc6>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d104      	bne.n	8001b62 <HAL_TIM_IC_Start_IT+0xbe>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b60:	e003      	b.n	8001b6a <HAL_TIM_IC_Start_IT+0xc6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <HAL_TIM_IC_Start_IT+0xd6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b78:	e013      	b.n	8001ba2 <HAL_TIM_IC_Start_IT+0xfe>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d104      	bne.n	8001b8a <HAL_TIM_IC_Start_IT+0xe6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b88:	e00b      	b.n	8001ba2 <HAL_TIM_IC_Start_IT+0xfe>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d104      	bne.n	8001b9a <HAL_TIM_IC_Start_IT+0xf6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b98:	e003      	b.n	8001ba2 <HAL_TIM_IC_Start_IT+0xfe>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d841      	bhi.n	8001c2c <HAL_TIM_IC_Start_IT+0x188>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_TIM_IC_Start_IT+0x10c>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001be5 	.word	0x08001be5
 8001bb4:	08001c2d 	.word	0x08001c2d
 8001bb8:	08001c2d 	.word	0x08001c2d
 8001bbc:	08001c2d 	.word	0x08001c2d
 8001bc0:	08001bf7 	.word	0x08001bf7
 8001bc4:	08001c2d 	.word	0x08001c2d
 8001bc8:	08001c2d 	.word	0x08001c2d
 8001bcc:	08001c2d 	.word	0x08001c2d
 8001bd0:	08001c09 	.word	0x08001c09
 8001bd4:	08001c2d 	.word	0x08001c2d
 8001bd8:	08001c2d 	.word	0x08001c2d
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001c1b 	.word	0x08001c1b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0202 	orr.w	r2, r2, #2
 8001bf2:	60da      	str	r2, [r3, #12]
      break;
 8001bf4:	e01b      	b.n	8001c2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0204 	orr.w	r2, r2, #4
 8001c04:	60da      	str	r2, [r3, #12]
      break;
 8001c06:	e012      	b.n	8001c2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	60da      	str	r2, [r3, #12]
      break;
 8001c18:	e009      	b.n	8001c2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0210 	orr.w	r2, r2, #16
 8001c28:	60da      	str	r2, [r3, #12]
      break;
 8001c2a:	e000      	b.n	8001c2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001c2c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fcef 	bl	800261a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_TIM_IC_Start_IT+0x1f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_TIM_IC_Start_IT+0x1b6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4e:	d004      	beq.n	8001c5a <HAL_TIM_IC_Start_IT+0x1b6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_TIM_IC_Start_IT+0x1f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d111      	bne.n	8001c7e <HAL_TIM_IC_Start_IT+0x1da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d010      	beq.n	8001c8e <HAL_TIM_IC_Start_IT+0x1ea>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7c:	e007      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0x1ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fbde 	bl	80004a4 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fa85 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fa8b 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fbb4 	bl	80004a4 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa5b 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa61 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fb8a 	bl	80004a4 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa31 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fa37 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fb60 	bl	80004a4 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fa07 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fa0d 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9e2 	bl	80021e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fc6b 	bl	8002726 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9d1 	bl	800221e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fc36 	bl	8002714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_IC_ConfigChannel+0x1a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e082      	b.n	8001fd0 <HAL_TIM_IC_ConfigChannel+0x120>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f000 f9fa 	bl	80022e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 020c 	bic.w	r2, r2, #12
 8001efa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6999      	ldr	r1, [r3, #24]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	619a      	str	r2, [r3, #24]
 8001f0e:	e05a      	b.n	8001fc6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d11c      	bne.n	8001f50 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f000 fa5d 	bl	80023e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6999      	ldr	r1, [r3, #24]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	021a      	lsls	r2, r3, #8
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	619a      	str	r2, [r3, #24]
 8001f4e:	e03a      	b.n	8001fc6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11b      	bne.n	8001f8e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f000 faa8 	bl	80024ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 020c 	bic.w	r2, r2, #12
 8001f78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69d9      	ldr	r1, [r3, #28]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
 8001f8c:	e01b      	b.n	8001fc6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f000 fac7 	bl	8002530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69d9      	ldr	r1, [r3, #28]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	021a      	lsls	r2, r3, #8
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_TIM_ConfigClockSource+0x18>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0b3      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x180>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800200e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002016:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002028:	d03e      	beq.n	80020a8 <HAL_TIM_ConfigClockSource+0xd0>
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202e:	f200 8087 	bhi.w	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002036:	f000 8085 	beq.w	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	d87f      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002040:	2b70      	cmp	r3, #112	; 0x70
 8002042:	d01a      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xa2>
 8002044:	2b70      	cmp	r3, #112	; 0x70
 8002046:	d87b      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002048:	2b60      	cmp	r3, #96	; 0x60
 800204a:	d050      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0x116>
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	d877      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002050:	2b50      	cmp	r3, #80	; 0x50
 8002052:	d03c      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0xf6>
 8002054:	2b50      	cmp	r3, #80	; 0x50
 8002056:	d873      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002058:	2b40      	cmp	r3, #64	; 0x40
 800205a:	d058      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x136>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d86f      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002060:	2b30      	cmp	r3, #48	; 0x30
 8002062:	d064      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x156>
 8002064:	2b30      	cmp	r3, #48	; 0x30
 8002066:	d86b      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002068:	2b20      	cmp	r3, #32
 800206a:	d060      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x156>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d867      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d05c      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x156>
 8002074:	2b10      	cmp	r3, #16
 8002076:	d05a      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002078:	e062      	b.n	8002140 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f000 faa7 	bl	80025dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800209c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]
      break;
 80020a6:	e04e      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f000 fa90 	bl	80025dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ca:	609a      	str	r2, [r3, #8]
      break;
 80020cc:	e03b      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 f954 	bl	8002388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2150      	movs	r1, #80	; 0x50
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fa5e 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 80020ec:	e02b      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 f9ae 	bl	800245c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2160      	movs	r1, #96	; 0x60
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fa4e 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 800210c:	e01b      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f934 	bl	8002388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fa3e 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 800212c:	e00b      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f000 fa35 	bl	80025a8 <TIM_ITRx_SetConfig>
        break;
 800213e:	e002      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002144:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d831      	bhi.n	80021d8 <HAL_TIM_ReadCapturedValue+0x78>
 8002174:	a201      	add	r2, pc, #4	; (adr r2, 800217c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	080021b1 	.word	0x080021b1
 8002180:	080021d9 	.word	0x080021d9
 8002184:	080021d9 	.word	0x080021d9
 8002188:	080021d9 	.word	0x080021d9
 800218c:	080021bb 	.word	0x080021bb
 8002190:	080021d9 	.word	0x080021d9
 8002194:	080021d9 	.word	0x080021d9
 8002198:	080021d9 	.word	0x080021d9
 800219c:	080021c5 	.word	0x080021c5
 80021a0:	080021d9 	.word	0x080021d9
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080021d9 	.word	0x080021d9
 80021ac:	080021cf 	.word	0x080021cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	60fb      	str	r3, [r7, #12]

      break;
 80021b8:	e00f      	b.n	80021da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	60fb      	str	r3, [r7, #12]

      break;
 80021c2:	e00a      	b.n	80021da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	60fb      	str	r3, [r7, #12]

      break;
 80021cc:	e005      	b.n	80021da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	60fb      	str	r3, [r7, #12]

      break;
 80021d6:	e000      	b.n	80021da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80021d8:	bf00      	nop
  }

  return tmpreg;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <TIM_Base_SetConfig+0xa8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <TIM_Base_SetConfig+0x28>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0x28>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a22      	ldr	r2, [pc, #136]	; (80022dc <TIM_Base_SetConfig+0xac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d108      	bne.n	800226a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <TIM_Base_SetConfig+0xa8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <TIM_Base_SetConfig+0x52>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d003      	beq.n	8002282 <TIM_Base_SetConfig+0x52>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <TIM_Base_SetConfig+0xac>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d108      	bne.n	8002294 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <TIM_Base_SetConfig+0xa8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	615a      	str	r2, [r3, #20]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40000400 	.word	0x40000400

080022e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0201 	bic.w	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <TIM_TI1_SetConfig+0xa0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_TI1_SetConfig+0x3e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d003      	beq.n	800231e <TIM_TI1_SetConfig+0x3e>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <TIM_TI1_SetConfig+0xa4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <TIM_TI1_SetConfig+0x42>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <TIM_TI1_SetConfig+0x44>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e003      	b.n	8002342 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	b2db      	uxtb	r3, r3
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f023 030a 	bic.w	r3, r3, #10
 800235c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 030a 	and.w	r3, r3, #10
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40000400 	.word	0x40000400

08002388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 0201 	bic.w	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 030a 	bic.w	r3, r3, #10
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f023 0210 	bic.w	r2, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	b29b      	uxth	r3, r3
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002436:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 0210 	bic.w	r2, r3, #16
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002486:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	031b      	lsls	r3, r3, #12
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800250a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	621a      	str	r2, [r3, #32]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800256e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	031b      	lsls	r3, r3, #12
 8002574:	b29b      	uxth	r3, r3
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f043 0307 	orr.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	021a      	lsls	r2, r3, #8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	431a      	orrs	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2201      	movs	r2, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e041      	b.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d004      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10c      	bne.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400

08002714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e03f      	b.n	80027ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f886 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f905 	bl	800298c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08a      	sub	sp, #40	; 0x28
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d17c      	bne.n	80028ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_UART_Transmit+0x2c>
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e075      	b.n	80028ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_UART_Transmit+0x3e>
 800280c:	2302      	movs	r3, #2
 800280e:	e06e      	b.n	80028ee <HAL_UART_Transmit+0x11c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2221      	movs	r2, #33	; 0x21
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fe f92b 	bl	8000a80 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d108      	bne.n	8002854 <HAL_UART_Transmit+0x82>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002864:	e02a      	b.n	80028bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f840 	bl	80028f6 <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e036      	b.n	80028ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	3302      	adds	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e007      	b.n	80028ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1cf      	bne.n	8002866 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f810 	bl	80028f6 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e006      	b.n	80028ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002906:	e02c      	b.n	8002962 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d028      	beq.n	8002962 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0x30>
 8002916:	f7fe f8b3 	bl	8000a80 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	429a      	cmp	r2, r3
 8002924:	d21d      	bcs.n	8002962 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002934:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e00f      	b.n	8002982 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	429a      	cmp	r2, r3
 800297e:	d0c3      	beq.n	8002908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029c6:	f023 030c 	bic.w	r3, r3, #12
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <UART_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7fe ff12 	bl	800181c <HAL_RCC_GetPCLK2Freq>
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	e002      	b.n	8002a02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7fe fefa 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 8002a00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	0119      	lsls	r1, r3, #4
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2064      	movs	r0, #100	; 0x64
 8002a42:	fb00 f303 	mul.w	r3, r0, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a58:	4419      	add	r1, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a72:	fba3 0302 	umull	r0, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2064      	movs	r0, #100	; 0x64
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	3332      	adds	r3, #50	; 0x32
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	440a      	add	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	51eb851f 	.word	0x51eb851f

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4d0c      	ldr	r5, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	f000 f822 	bl	8002b00 <_init>
 8002abc:	2600      	movs	r6, #0
 8002abe:	4d0a      	ldr	r5, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b40 	.word	0x08002b40
 8002ae4:	08002b40 	.word	0x08002b40
 8002ae8:	08002b40 	.word	0x08002b40
 8002aec:	08002b44 	.word	0x08002b44

08002af0 <memset>:
 8002af0:	4603      	mov	r3, r0
 8002af2:	4402      	add	r2, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <memset+0xa>
 8002af8:	4770      	bx	lr
 8002afa:	f803 1b01 	strb.w	r1, [r3], #1
 8002afe:	e7f9      	b.n	8002af4 <memset+0x4>

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
