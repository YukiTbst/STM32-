
HANGZHOUWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf8  08002bf8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf8  08002bf8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf8  08002bf8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000014  08002c14  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08002c14  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064b1  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d6  00000000  00000000  000264ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00027ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ecf  00000000  00000000  000287d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000716c  00000000  00000000  0003e69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e427  00000000  00000000  0004580b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a3c  00000000  00000000  000c3c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba4 	.word	0x08002ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002ba4 	.word	0x08002ba4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcab 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82b 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f92f 	bl	80003bc <MX_GPIO_Init>

  MX_USART2_UART_Init();
 800015e:	f000 f8b3 	bl	80002c8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000162:	f000 f905 	bl	8000370 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f885 	bl	8000274 <MX_USART1_UART_Init>

  MX_USART3_UART_Init();
 800016a:	f000 f8d7 	bl	800031c <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800016e:	f000 f864 	bl	800023a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <main+0x58>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	68da      	ldr	r2, [r3, #12]
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <main+0x58>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	f042 0210 	orr.w	r2, r2, #16
 8000180:	60da      	str	r2, [r3, #12]
   HAL_UART_Receive_DMA(&huart1, distance1_received, 255);
 8000182:	22ff      	movs	r2, #255	; 0xff
 8000184:	4908      	ldr	r1, [pc, #32]	; (80001a8 <main+0x5c>)
 8000186:	4807      	ldr	r0, [pc, #28]	; (80001a4 <main+0x58>)
 8000188:	f001 ff1b 	bl	8001fc2 <HAL_UART_Receive_DMA>

  //__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
  //HAL_UART_Receive_DMA(&huart3, distance2_received, 255);
  char words[10]="hello";
 800018c:	4a07      	ldr	r2, [pc, #28]	; (80001ac <main+0x60>)
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000194:	6018      	str	r0, [r3, #0]
 8000196:	3304      	adds	r3, #4
 8000198:	8019      	strh	r1, [r3, #0]
 800019a:	f107 030a 	add.w	r3, r7, #10
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a2:	e7fe      	b.n	80001a2 <main+0x56>
 80001a4:	20000120 	.word	0x20000120
 80001a8:	20000164 	.word	0x20000164
 80001ac:	08002bbc 	.word	0x08002bbc

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fce8 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e4:	2302      	movs	r3, #2
 80001e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 f9e9 	bl	80015d0 <HAL_RCC_OscConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000204:	f000 fa50 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	230f      	movs	r3, #15
 800020a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020c:	2302      	movs	r3, #2
 800020e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2102      	movs	r1, #2
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fc54 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022e:	f000 fa3b 	bl	80006a8 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	2026      	movs	r0, #38	; 0x26
 8000244:	f000 fd6b 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000248:	2026      	movs	r0, #38	; 0x26
 800024a:	f000 fd84 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	2025      	movs	r0, #37	; 0x25
 8000254:	f000 fd63 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000258:	2025      	movs	r0, #37	; 0x25
 800025a:	f000 fd7c 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	2027      	movs	r0, #39	; 0x27
 8000264:	f000 fd5b 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000268:	2027      	movs	r0, #39	; 0x27
 800026a:	f000 fd74 	bl	8000d56 <HAL_NVIC_EnableIRQ>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <MX_USART1_UART_Init+0x50>)
 800027c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000284:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800029a:	220c      	movs	r2, #12
 800029c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002aa:	4805      	ldr	r0, [pc, #20]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002ac:	f001 fdaa 	bl	8001e04 <HAL_UART_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002b6:	f000 f9f7 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000120 	.word	0x20000120
 80002c4:	40013800 	.word	0x40013800

080002c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <MX_USART2_UART_Init+0x50>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_USART2_UART_Init+0x4c>)
 8000300:	f001 fd80 	bl	8001e04 <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800030a:	f000 f9cd 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000368 	.word	0x20000368
 8000318:	40004400 	.word	0x40004400

0800031c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000322:	4a12      	ldr	r2, [pc, #72]	; (800036c <MX_USART3_UART_Init+0x50>)
 8000324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800032c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART3_UART_Init+0x4c>)
 8000354:	f001 fd56 	bl	8001e04 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800035e:	f000 f9a3 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000078 	.word	0x20000078
 800036c:	40004800 	.word	0x40004800

08000370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_DMA_Init+0x48>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <MX_DMA_Init+0x48>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <MX_DMA_Init+0x48>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	200d      	movs	r0, #13
 8000394:	f000 fcc3 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000398:	200d      	movs	r0, #13
 800039a:	f000 fcdc 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200f      	movs	r0, #15
 80003a4:	f000 fcbb 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003a8:	200f      	movs	r0, #15
 80003aa:	f000 fcd4 	bl	8000d56 <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_GPIO_Init+0x70>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a19      	ldr	r2, [pc, #100]	; (800042c <MX_GPIO_Init+0x70>)
 80003c8:	f043 0310 	orr.w	r3, r3, #16
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_GPIO_Init+0x70>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0310 	and.w	r3, r3, #16
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_GPIO_Init+0x70>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <MX_GPIO_Init+0x70>)
 80003e0:	f043 0320 	orr.w	r3, r3, #32
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_GPIO_Init+0x70>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0320 	and.w	r3, r3, #32
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_GPIO_Init+0x70>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a0d      	ldr	r2, [pc, #52]	; (800042c <MX_GPIO_Init+0x70>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_GPIO_Init+0x70>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_GPIO_Init+0x70>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a07      	ldr	r2, [pc, #28]	; (800042c <MX_GPIO_Init+0x70>)
 8000410:	f043 0308 	orr.w	r3, r3, #8
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_GPIO_Init+0x70>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0308 	and.w	r3, r3, #8
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <USAR_UART_IDLECallback>:

/* USER CODE BEGIN 4 */
void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	// 停止本次DMA传输
	HAL_UART_DMAStop(huart);
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f001 fdf2 	bl	8002022 <HAL_UART_DMAStop>
	// 计算接收到的数据长度
	uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800043e:	4b38      	ldr	r3, [pc, #224]	; (8000520 <USAR_UART_IDLECallback+0xf0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	43db      	mvns	r3, r3
 8000448:	73fb      	strb	r3, [r7, #15]
	uint8_t* this_buff;
	uint8_t* this_received;
	uint8_t* next_received;
	uint8_t* this_ID;
	uint8_t* is_updated;
	if(huart==&huart1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a35      	ldr	r2, [pc, #212]	; (8000524 <USAR_UART_IDLECallback+0xf4>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d10a      	bne.n	8000468 <USAR_UART_IDLECallback+0x38>
	{
		this_buff=distance1_buff;
 8000452:	4b35      	ldr	r3, [pc, #212]	; (8000528 <USAR_UART_IDLECallback+0xf8>)
 8000454:	61fb      	str	r3, [r7, #28]
		this_ID=sensor_ID1;
 8000456:	4b35      	ldr	r3, [pc, #212]	; (800052c <USAR_UART_IDLECallback+0xfc>)
 8000458:	617b      	str	r3, [r7, #20]
		this_received=distance1_received;
 800045a:	4b35      	ldr	r3, [pc, #212]	; (8000530 <USAR_UART_IDLECallback+0x100>)
 800045c:	61bb      	str	r3, [r7, #24]
		next_received=distance2_received;
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <USAR_UART_IDLECallback+0x104>)
 8000460:	60bb      	str	r3, [r7, #8]
		is_updated=&distance1_updated;
 8000462:	4b35      	ldr	r3, [pc, #212]	; (8000538 <USAR_UART_IDLECallback+0x108>)
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	e00d      	b.n	8000484 <USAR_UART_IDLECallback+0x54>
	}
	else if(huart==&huart3)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a34      	ldr	r2, [pc, #208]	; (800053c <USAR_UART_IDLECallback+0x10c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d109      	bne.n	8000484 <USAR_UART_IDLECallback+0x54>
	{
		this_buff=distance2_buff;
 8000470:	4b33      	ldr	r3, [pc, #204]	; (8000540 <USAR_UART_IDLECallback+0x110>)
 8000472:	61fb      	str	r3, [r7, #28]
		this_ID=sensor_ID2;
 8000474:	4b33      	ldr	r3, [pc, #204]	; (8000544 <USAR_UART_IDLECallback+0x114>)
 8000476:	617b      	str	r3, [r7, #20]
		this_received=distance2_received;
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <USAR_UART_IDLECallback+0x104>)
 800047a:	61bb      	str	r3, [r7, #24]
		next_received=distance1_received;
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <USAR_UART_IDLECallback+0x100>)
 800047e:	60bb      	str	r3, [r7, #8]
		is_updated=&distance2_updated;
 8000480:	4b31      	ldr	r3, [pc, #196]	; (8000548 <USAR_UART_IDLECallback+0x118>)
 8000482:	613b      	str	r3, [r7, #16]
	}
	HAL_UART_Transmit(&huart2, this_ID, 4, 0x200);
 8000484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000488:	2204      	movs	r2, #4
 800048a:	6979      	ldr	r1, [r7, #20]
 800048c:	482f      	ldr	r0, [pc, #188]	; (800054c <USAR_UART_IDLECallback+0x11c>)
 800048e:	f001 fd06 	bl	8001e9e <HAL_UART_Transmit>
	if(*is_updated==0)
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d11c      	bne.n	80004d4 <USAR_UART_IDLECallback+0xa4>
	{
		if((data_length==9))
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	2b09      	cmp	r3, #9
 800049e:	d113      	bne.n	80004c8 <USAR_UART_IDLECallback+0x98>
			{
				memcpy(this_buff, this_received,9);
 80004a0:	2209      	movs	r2, #9
 80004a2:	69b9      	ldr	r1, [r7, #24]
 80004a4:	69f8      	ldr	r0, [r7, #28]
 80004a6:	f002 fb67 	bl	8002b78 <memcpy>
				*is_updated=1;
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, this_ID, 4, 0x200);
 80004b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b4:	2204      	movs	r2, #4
 80004b6:	6979      	ldr	r1, [r7, #20]
 80004b8:	4824      	ldr	r0, [pc, #144]	; (800054c <USAR_UART_IDLECallback+0x11c>)
 80004ba:	f001 fcf0 	bl	8001e9e <HAL_UART_Transmit>
				distance_data_process(this_buff, this_ID);
 80004be:	6979      	ldr	r1, [r7, #20]
 80004c0:	69f8      	ldr	r0, [r7, #28]
 80004c2:	f000 f845 	bl	8000550 <distance_data_process>
 80004c6:	e005      	b.n	80004d4 <USAR_UART_IDLECallback+0xa4>
			}
			else
			{
				HAL_UART_Receive_DMA(huart, (uint8_t*)this_received, 255);
 80004c8:	22ff      	movs	r2, #255	; 0xff
 80004ca:	69b9      	ldr	r1, [r7, #24]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f001 fd78 	bl	8001fc2 <HAL_UART_Receive_DMA>
				return;
 80004d2:	e021      	b.n	8000518 <USAR_UART_IDLECallback+0xe8>
			}
	}

	memset(this_received, 255, 255);
 80004d4:	22ff      	movs	r2, #255	; 0xff
 80004d6:	21ff      	movs	r1, #255	; 0xff
 80004d8:	69b8      	ldr	r0, [r7, #24]
 80004da:	f002 fb5b 	bl	8002b94 <memset>
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f022 0210 	bic.w	r2, r2, #16
 80004ec:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(huart, (uint8_t*)this_received, 255);
 80004ee:	22ff      	movs	r2, #255	; 0xff
 80004f0:	69b9      	ldr	r1, [r7, #24]
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f001 fd65 	bl	8001fc2 <HAL_UART_Receive_DMA>
	huart=((huart==&huart1)?&huart2:&huart1);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <USAR_UART_IDLECallback+0xf4>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d101      	bne.n	8000504 <USAR_UART_IDLECallback+0xd4>
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <USAR_UART_IDLECallback+0x11c>)
 8000502:	e000      	b.n	8000506 <USAR_UART_IDLECallback+0xd6>
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <USAR_UART_IDLECallback+0xf4>)
 8000506:	607b      	str	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	68da      	ldr	r2, [r3, #12]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f042 0210 	orr.w	r2, r2, #16
 8000516:	60da      	str	r2, [r3, #12]
	}
	// 重启�?????始DMA传输 每次255字节数据
	memset(distance1_received,255,255);
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)distance1_received, 255);
	*/
}
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000d8 	.word	0x200000d8
 8000524:	20000120 	.word	0x20000120
 8000528:	200000bc 	.word	0x200000bc
 800052c:	20000000 	.word	0x20000000
 8000530:	20000164 	.word	0x20000164
 8000534:	20000268 	.word	0x20000268
 8000538:	20000030 	.word	0x20000030
 800053c:	20000078 	.word	0x20000078
 8000540:	200000cc 	.word	0x200000cc
 8000544:	20000004 	.word	0x20000004
 8000548:	20000031 	.word	0x20000031
 800054c:	20000368 	.word	0x20000368

08000550 <distance_data_process>:



void distance_data_process(uint8_t* data, uint8_t* sensor_ID)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	uint16_t distance=0;
 800055a:	2300      	movs	r3, #0
 800055c:	83fb      	strh	r3, [r7, #30]
	uint8_t distance_str[4]="9999";
 800055e:	f04f 3339 	mov.w	r3, #960051513	; 0x39393939
 8000562:	61bb      	str	r3, [r7, #24]
	uint8_t endl[2]="\r\n";
 8000564:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000568:	82bb      	strh	r3, [r7, #20]
	uint8_t failed[6]="failed";
 800056a:	4a46      	ldr	r2, [pc, #280]	; (8000684 <distance_data_process+0x134>)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000574:	6018      	str	r0, [r3, #0]
 8000576:	3304      	adds	r3, #4
 8000578:	8019      	strh	r1, [r3, #0]
	distance+=*(data+3);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3303      	adds	r3, #3
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b29a      	uxth	r2, r3
 8000582:	8bfb      	ldrh	r3, [r7, #30]
 8000584:	4413      	add	r3, r2
 8000586:	83fb      	strh	r3, [r7, #30]
	distance*=256;
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	83fb      	strh	r3, [r7, #30]
	distance+=*(data+2);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	8bfb      	ldrh	r3, [r7, #30]
 8000598:	4413      	add	r3, r2
 800059a:	83fb      	strh	r3, [r7, #30]
	if(distance!=0xffff)
 800059c:	8bfb      	ldrh	r3, [r7, #30]
 800059e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d028      	beq.n	80005f8 <distance_data_process+0xa8>
	{
		for(int8_t i=4; i>0; i--)
 80005a6:	2304      	movs	r3, #4
 80005a8:	777b      	strb	r3, [r7, #29]
 80005aa:	e021      	b.n	80005f0 <distance_data_process+0xa0>
		{
			distance_str[i-1]=(distance%10)+48;
 80005ac:	8bfa      	ldrh	r2, [r7, #30]
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <distance_data_process+0x138>)
 80005b0:	fba3 1302 	umull	r1, r3, r3, r2
 80005b4:	08d9      	lsrs	r1, r3, #3
 80005b6:	460b      	mov	r3, r1
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	3230      	adds	r2, #48	; 0x30
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	f107 0120 	add.w	r1, r7, #32
 80005d2:	440b      	add	r3, r1
 80005d4:	f803 2c08 	strb.w	r2, [r3, #-8]
			distance/=10;
 80005d8:	8bfb      	ldrh	r3, [r7, #30]
 80005da:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <distance_data_process+0x138>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	08db      	lsrs	r3, r3, #3
 80005e2:	83fb      	strh	r3, [r7, #30]
		for(int8_t i=4; i>0; i--)
 80005e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	777b      	strb	r3, [r7, #29]
 80005f0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dcd9      	bgt.n	80005ac <distance_data_process+0x5c>
		}
	}
	if(sensor_ID==sensor_ID1)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a24      	ldr	r2, [pc, #144]	; (800068c <distance_data_process+0x13c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d103      	bne.n	8000608 <distance_data_process+0xb8>
 8000600:	69bb      	ldr	r3, [r7, #24]
	{
		memcpy(distance1_str, distance_str, 4);
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <distance_data_process+0x140>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	e006      	b.n	8000616 <distance_data_process+0xc6>
	}
	else if(sensor_ID==sensor_ID2)
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <distance_data_process+0x144>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d102      	bne.n	8000616 <distance_data_process+0xc6>
 8000610:	69bb      	ldr	r3, [r7, #24]
	{
		memcpy(distance2_str, distance_str, 4);
 8000612:	4a21      	ldr	r2, [pc, #132]	; (8000698 <distance_data_process+0x148>)
 8000614:	6013      	str	r3, [r2, #0]
	}

	if(distance1_updated*distance2_updated!=0)
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <distance_data_process+0x14c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <distance_data_process+0x150>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	fb03 f302 	mul.w	r3, r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d029      	beq.n	800067c <distance_data_process+0x12c>
	{
		distance1_updated=0;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <distance_data_process+0x14c>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
		distance2_updated=0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <distance_data_process+0x150>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, sensor_ID1, 4, 0x200);
 8000634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000638:	2204      	movs	r2, #4
 800063a:	4914      	ldr	r1, [pc, #80]	; (800068c <distance_data_process+0x13c>)
 800063c:	4819      	ldr	r0, [pc, #100]	; (80006a4 <distance_data_process+0x154>)
 800063e:	f001 fc2e 	bl	8001e9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, distance1_str, 4, 0x200);
 8000642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000646:	2204      	movs	r2, #4
 8000648:	4911      	ldr	r1, [pc, #68]	; (8000690 <distance_data_process+0x140>)
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <distance_data_process+0x154>)
 800064c:	f001 fc27 	bl	8001e9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, endl, 2, 0x200);
 8000650:	f107 0114 	add.w	r1, r7, #20
 8000654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000658:	2202      	movs	r2, #2
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <distance_data_process+0x154>)
 800065c:	f001 fc1f 	bl	8001e9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, sensor_ID2, 4, 0x200);
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	2204      	movs	r2, #4
 8000666:	490b      	ldr	r1, [pc, #44]	; (8000694 <distance_data_process+0x144>)
 8000668:	480e      	ldr	r0, [pc, #56]	; (80006a4 <distance_data_process+0x154>)
 800066a:	f001 fc18 	bl	8001e9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, distance2_str, 4, 0x200);
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	2204      	movs	r2, #4
 8000674:	4908      	ldr	r1, [pc, #32]	; (8000698 <distance_data_process+0x148>)
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <distance_data_process+0x154>)
 8000678:	f001 fc11 	bl	8001e9e <HAL_UART_Transmit>
	else
	{
		//HAL_UART_Transmit(&huart2, failed, 6, 0x200);
	}

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08002bc8 	.word	0x08002bc8
 8000688:	cccccccd 	.word	0xcccccccd
 800068c:	20000000 	.word	0x20000000
 8000690:	200003ac 	.word	0x200003ac
 8000694:	20000004 	.word	0x20000004
 8000698:	200000c8 	.word	0x200000c8
 800069c:	20000030 	.word	0x20000030
 80006a0:	20000031 	.word	0x20000031
 80006a4:	20000368 	.word	0x20000368

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_MspInit+0x60>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_MspInit+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a79      	ldr	r2, [pc, #484]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d158      	bne.n	80007ea <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000738:	4b78      	ldr	r3, [pc, #480]	; (800091c <HAL_UART_MspInit+0x204>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a77      	ldr	r2, [pc, #476]	; (800091c <HAL_UART_MspInit+0x204>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b75      	ldr	r3, [pc, #468]	; (800091c <HAL_UART_MspInit+0x204>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b72      	ldr	r3, [pc, #456]	; (800091c <HAL_UART_MspInit+0x204>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a71      	ldr	r2, [pc, #452]	; (800091c <HAL_UART_MspInit+0x204>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b6f      	ldr	r3, [pc, #444]	; (800091c <HAL_UART_MspInit+0x204>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4619      	mov	r1, r3
 800077c:	4868      	ldr	r0, [pc, #416]	; (8000920 <HAL_UART_MspInit+0x208>)
 800077e:	f000 fda3 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4619      	mov	r1, r3
 8000796:	4862      	ldr	r0, [pc, #392]	; (8000920 <HAL_UART_MspInit+0x208>)
 8000798:	f000 fd96 	bl	80012c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800079c:	4b61      	ldr	r3, [pc, #388]	; (8000924 <HAL_UART_MspInit+0x20c>)
 800079e:	4a62      	ldr	r2, [pc, #392]	; (8000928 <HAL_UART_MspInit+0x210>)
 80007a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a2:	4b60      	ldr	r3, [pc, #384]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a8:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ae:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b4:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80007c0:	4b58      	ldr	r3, [pc, #352]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007c2:	2220      	movs	r2, #32
 80007c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007cc:	4855      	ldr	r0, [pc, #340]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007ce:	f000 fadd 	bl	8000d8c <HAL_DMA_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007d8:	f7ff ff66 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a51      	ldr	r2, [pc, #324]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007e0:	639a      	str	r2, [r3, #56]	; 0x38
 80007e2:	4a50      	ldr	r2, [pc, #320]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007e8:	e092      	b.n	8000910 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a4f      	ldr	r2, [pc, #316]	; (800092c <HAL_UART_MspInit+0x214>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d130      	bne.n	8000856 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f4:	4b49      	ldr	r3, [pc, #292]	; (800091c <HAL_UART_MspInit+0x204>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a48      	ldr	r2, [pc, #288]	; (800091c <HAL_UART_MspInit+0x204>)
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b46      	ldr	r3, [pc, #280]	; (800091c <HAL_UART_MspInit+0x204>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b43      	ldr	r3, [pc, #268]	; (800091c <HAL_UART_MspInit+0x204>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a42      	ldr	r2, [pc, #264]	; (800091c <HAL_UART_MspInit+0x204>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b40      	ldr	r3, [pc, #256]	; (800091c <HAL_UART_MspInit+0x204>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000824:	2304      	movs	r3, #4
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4619      	mov	r1, r3
 8000836:	483a      	ldr	r0, [pc, #232]	; (8000920 <HAL_UART_MspInit+0x208>)
 8000838:	f000 fd46 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4834      	ldr	r0, [pc, #208]	; (8000920 <HAL_UART_MspInit+0x208>)
 8000850:	f000 fd3a 	bl	80012c8 <HAL_GPIO_Init>
}
 8000854:	e05c      	b.n	8000910 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a35      	ldr	r2, [pc, #212]	; (8000930 <HAL_UART_MspInit+0x218>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d157      	bne.n	8000910 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_UART_MspInit+0x204>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <HAL_UART_MspInit+0x204>)
 8000866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800086a:	61d3      	str	r3, [r2, #28]
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_UART_MspInit+0x204>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <HAL_UART_MspInit+0x204>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a27      	ldr	r2, [pc, #156]	; (800091c <HAL_UART_MspInit+0x204>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <HAL_UART_MspInit+0x204>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4619      	mov	r1, r3
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008a6:	f000 fd0f 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4619      	mov	r1, r3
 80008be:	481d      	ldr	r0, [pc, #116]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008c0:	f000 fd02 	bl	80012c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_UART_MspInit+0x224>)
 80008c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008ea:	2220      	movs	r2, #32
 80008ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008f6:	f000 fa49 	bl	8000d8c <HAL_DMA_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8000900:	f7ff fed2 	bl	80006a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <HAL_UART_MspInit+0x220>)
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_UART_MspInit+0x220>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013800 	.word	0x40013800
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800
 8000924:	200000d8 	.word	0x200000d8
 8000928:	40020058 	.word	0x40020058
 800092c:	40004400 	.word	0x40004400
 8000930:	40004800 	.word	0x40004800
 8000934:	40010c00 	.word	0x40010c00
 8000938:	20000034 	.word	0x20000034
 800093c:	40020030 	.word	0x40020030

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f8d7 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <DMA1_Channel3_IRQHandler+0x10>)
 8000996:	f000 fb63 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000034 	.word	0x20000034

080009a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <DMA1_Channel5_IRQHandler+0x10>)
 80009aa:	f000 fb59 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000d8 	.word	0x200000d8

080009b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009be:	480e      	ldr	r0, [pc, #56]	; (80009f8 <USART1_IRQHandler+0x40>)
 80009c0:	f001 fb8a 	bl	80020d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <USART1_IRQHandler+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d10d      	bne.n	80009ee <USART1_IRQHandler+0x36>
          {	 // 清除空闲中断标志（否则会�?直不断进入中断）
              __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <USART1_IRQHandler+0x40>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <USART1_IRQHandler+0x40>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
              //printf("\r\nUART1 Idle IQR Detected\r\n");
              // 调用中断处理函数
              USAR_UART_IDLECallback(&huart1);
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <USART1_IRQHandler+0x40>)
 80009ea:	f7ff fd21 	bl	8000430 <USAR_UART_IDLECallback>
          }

  /* USER CODE END USART1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000120 	.word	0x20000120

080009fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <USART2_IRQHandler+0x10>)
 8000a02:	f001 fb69 	bl	80020d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000368 	.word	0x20000368

08000a10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <USART3_IRQHandler+0x40>)
 8000a18:	f001 fb5e 	bl	80020d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <USART3_IRQHandler+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	d10d      	bne.n	8000a46 <USART3_IRQHandler+0x36>
            {	 // 清除空闲中断标志（否则会�?直不断进入中断）
                __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <USART3_IRQHandler+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <USART3_IRQHandler+0x40>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
                //printf("\r\nUART1 Idle IQR Detected\r\n");
                // 调用中断处理函数
                USAR_UART_IDLECallback(&huart3);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <USART3_IRQHandler+0x40>)
 8000a42:	f7ff fcf5 	bl	8000430 <USAR_UART_IDLECallback>
            }
  /* USER CODE END USART3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000078 	.word	0x20000078

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a86:	f7ff ffe5 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 f851 	bl	8002b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fb5d 	bl	800014c <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a9c:	08002c00 	.word	0x08002c00
  ldr r2, =_sbss
 8000aa0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aa4:	200003b4 	.word	0x200003b4

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f923 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fdf4 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f903 	bl	8000d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000010 	.word	0x20000010
 8000b34:	2000000c 	.word	0x2000000c

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000010 	.word	0x20000010
 8000b58:	200003b0 	.word	0x200003b0

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	200003b0 	.word	0x200003b0

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4906      	ldr	r1, [pc, #24]	; (8000c08 <__NVIC_EnableIRQ+0x34>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff90 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff2d 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff42 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff35 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa2 	bl	8000cc4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e043      	b.n	8000e2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_DMA_Init+0xa8>)
 8000daa:	4413      	add	r3, r2
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_DMA_Init+0xac>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	009a      	lsls	r2, r3, #2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_DMA_Init+0xb0>)
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	bffdfff8 	.word	0xbffdfff8
 8000e38:	cccccccd 	.word	0xcccccccd
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_DMA_Start_IT+0x20>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e04a      	b.n	8000ef6 <HAL_DMA_Start_IT+0xb6>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d13a      	bne.n	8000ee8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2202      	movs	r2, #2
 8000e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 f9e8 	bl	800126c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 020e 	orr.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e00f      	b.n	8000ed6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0204 	bic.w	r2, r2, #4
 8000ec4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 020a 	orr.w	r2, r2, #10
 8000ed4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e005      	b.n	8000ef4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d008      	beq.n	8000f26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2204      	movs	r2, #4
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e020      	b.n	8000f68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 020e 	bic.w	r2, r2, #14
 8000f34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d005      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e051      	b.n	800103a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 020e 	bic.w	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_DMA_Abort_IT+0xd0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d029      	beq.n	8001014 <HAL_DMA_Abort_IT+0xa0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_DMA_Abort_IT+0xd4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d022      	beq.n	8001010 <HAL_DMA_Abort_IT+0x9c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_DMA_Abort_IT+0xd8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d01a      	beq.n	800100a <HAL_DMA_Abort_IT+0x96>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_DMA_Abort_IT+0xdc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d012      	beq.n	8001004 <HAL_DMA_Abort_IT+0x90>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_DMA_Abort_IT+0xe0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00a      	beq.n	8000ffe <HAL_DMA_Abort_IT+0x8a>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_DMA_Abort_IT+0xe4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d102      	bne.n	8000ff8 <HAL_DMA_Abort_IT+0x84>
 8000ff2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ff6:	e00e      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 8000ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffc:	e00b      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	e008      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	e005      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	e002      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 8001010:	2310      	movs	r3, #16
 8001012:	e000      	b.n	8001016 <HAL_DMA_Abort_IT+0xa2>
 8001014:	2301      	movs	r3, #1
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_DMA_Abort_IT+0xe8>)
 8001018:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
    } 
  }
  return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020008 	.word	0x40020008
 8001048:	4002001c 	.word	0x4002001c
 800104c:	40020030 	.word	0x40020030
 8001050:	40020044 	.word	0x40020044
 8001054:	40020058 	.word	0x40020058
 8001058:	4002006c 	.word	0x4002006c
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	2204      	movs	r2, #4
 800107e:	409a      	lsls	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d04f      	beq.n	8001128 <HAL_DMA_IRQHandler+0xc8>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d04a      	beq.n	8001128 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_DMA_IRQHandler+0x1f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d029      	beq.n	800110e <HAL_DMA_IRQHandler+0xae>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a65      	ldr	r2, [pc, #404]	; (8001254 <HAL_DMA_IRQHandler+0x1f4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d022      	beq.n	800110a <HAL_DMA_IRQHandler+0xaa>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a63      	ldr	r2, [pc, #396]	; (8001258 <HAL_DMA_IRQHandler+0x1f8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01a      	beq.n	8001104 <HAL_DMA_IRQHandler+0xa4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a62      	ldr	r2, [pc, #392]	; (800125c <HAL_DMA_IRQHandler+0x1fc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0x9e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <HAL_DMA_IRQHandler+0x200>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00a      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x98>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_DMA_IRQHandler+0x204>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d102      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x92>
 80010ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f0:	e00e      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010f6:	e00b      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010fc:	e008      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001102:	e005      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	e002      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	e000      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 800110e:	2304      	movs	r3, #4
 8001110:	4a55      	ldr	r2, [pc, #340]	; (8001268 <HAL_DMA_IRQHandler+0x208>)
 8001112:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8094 	beq.w	8001246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001126:	e08e      	b.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2202      	movs	r2, #2
 800112e:	409a      	lsls	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d056      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x186>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d051      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10b      	bne.n	8001168 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020a 	bic.w	r2, r2, #10
 800115e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <HAL_DMA_IRQHandler+0x1f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d029      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x166>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a37      	ldr	r2, [pc, #220]	; (8001254 <HAL_DMA_IRQHandler+0x1f4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d022      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x162>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a35      	ldr	r2, [pc, #212]	; (8001258 <HAL_DMA_IRQHandler+0x1f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0x15c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a34      	ldr	r2, [pc, #208]	; (800125c <HAL_DMA_IRQHandler+0x1fc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d012      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x156>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <HAL_DMA_IRQHandler+0x200>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x150>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_DMA_IRQHandler+0x204>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <HAL_DMA_IRQHandler+0x14a>
 80011a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011a8:	e00e      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ae:	e00b      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b4:	e008      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ba:	e005      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	e002      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011c2:	2320      	movs	r3, #32
 80011c4:	e000      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011c6:	2302      	movs	r3, #2
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_DMA_IRQHandler+0x208>)
 80011ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d034      	beq.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011e4:	e02f      	b.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2208      	movs	r2, #8
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d028      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d023      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020e 	bic.w	r2, r2, #14
 800120e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    }
  }
  return;
 8001246:	bf00      	nop
 8001248:	bf00      	nop
}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020008 	.word	0x40020008
 8001254:	4002001c 	.word	0x4002001c
 8001258:	40020030 	.word	0x40020030
 800125c:	40020044 	.word	0x40020044
 8001260:	40020058 	.word	0x40020058
 8001264:	4002006c 	.word	0x4002006c
 8001268:	40020000 	.word	0x40020000

0800126c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b10      	cmp	r3, #16
 8001298:	d108      	bne.n	80012ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012aa:	e007      	b.n	80012bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	60da      	str	r2, [r3, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e169      	b.n	80015b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8158 	bne.w	80015aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a9a      	ldr	r2, [pc, #616]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d05e      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001304:	4a98      	ldr	r2, [pc, #608]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d875      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800130a:	4a98      	ldr	r2, [pc, #608]	; (800156c <HAL_GPIO_Init+0x2a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d058      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001310:	4a96      	ldr	r2, [pc, #600]	; (800156c <HAL_GPIO_Init+0x2a4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d86f      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001316:	4a96      	ldr	r2, [pc, #600]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d052      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 800131c:	4a94      	ldr	r2, [pc, #592]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d869      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001322:	4a94      	ldr	r2, [pc, #592]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04c      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001328:	4a92      	ldr	r2, [pc, #584]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d863      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800132e:	4a92      	ldr	r2, [pc, #584]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d046      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d85d      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800133a:	2b12      	cmp	r3, #18
 800133c:	d82a      	bhi.n	8001394 <HAL_GPIO_Init+0xcc>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d859      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_GPIO_Init+0x80>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013c3 	.word	0x080013c3
 800134c:	0800139d 	.word	0x0800139d
 8001350:	080013af 	.word	0x080013af
 8001354:	080013f1 	.word	0x080013f1
 8001358:	080013f7 	.word	0x080013f7
 800135c:	080013f7 	.word	0x080013f7
 8001360:	080013f7 	.word	0x080013f7
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f7 	.word	0x080013f7
 8001370:	080013f7 	.word	0x080013f7
 8001374:	080013f7 	.word	0x080013f7
 8001378:	080013f7 	.word	0x080013f7
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013f7 	.word	0x080013f7
 8001384:	080013f7 	.word	0x080013f7
 8001388:	080013f7 	.word	0x080013f7
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013b9 	.word	0x080013b9
 8001394:	4a79      	ldr	r2, [pc, #484]	; (800157c <HAL_GPIO_Init+0x2b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e029      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e024      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01f      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e01a      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e013      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e009      	b.n	80013f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          break;
 80013f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d801      	bhi.n	8001402 <HAL_GPIO_Init+0x13a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_Init+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d802      	bhi.n	8001414 <HAL_GPIO_Init+0x14c>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x152>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3b08      	subs	r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	210f      	movs	r1, #15
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80b1 	beq.w	80015aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <HAL_GPIO_Init+0x2c0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d013      	beq.n	80014b4 <HAL_GPIO_Init+0x1ec>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00d      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x1e4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4928      	ldr	r1, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	491e      	ldr	r1, [pc, #120]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4918      	ldr	r1, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d021      	beq.n	800159c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e021      	b.n	80015aa <HAL_GPIO_Init+0x2e2>
 8001566:	bf00      	nop
 8001568:	10320000 	.word	0x10320000
 800156c:	10310000 	.word	0x10310000
 8001570:	10220000 	.word	0x10220000
 8001574:	10210000 	.word	0x10210000
 8001578:	10120000 	.word	0x10120000
 800157c:	10110000 	.word	0x10110000
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40011400 	.word	0x40011400
 8001598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_GPIO_Init+0x304>)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_GPIO_Init+0x304>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	3301      	adds	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae8e 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	372c      	adds	r7, #44	; 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e26c      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8087 	beq.w	80016fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d00c      	beq.n	8001616 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fc:	4b8f      	ldr	r3, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d112      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
 8001608:	4b8c      	ldr	r3, [pc, #560]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d10b      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d06c      	beq.n	80016fc <HAL_RCC_OscConfig+0x12c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d168      	bne.n	80016fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e246      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x76>
 8001638:	4b80      	ldr	r3, [pc, #512]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a7f      	ldr	r2, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e02e      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x98>
 800164e:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7a      	ldr	r2, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b78      	ldr	r3, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a77      	ldr	r2, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0xbc>
 8001672:	4b72      	ldr	r3, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a71      	ldr	r2, [pc, #452]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6f      	ldr	r3, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6e      	ldr	r2, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa56 	bl	8000b5c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fa52 	bl	8000b5c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1fa      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe4>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa42 	bl	8000b5c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa3e 	bl	8000b5c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1e6      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x10c>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170a:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001716:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x18c>
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x176>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1ba      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4939      	ldr	r1, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff f9f7 	bl	8000b5c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff f9f3 	bl	8000b5c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e19b      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4927      	ldr	r1, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9d6 	bl	8000b5c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff f9d2 	bl	8000b5c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e17a      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03a      	beq.n	8001854 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d019      	beq.n	800181a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_RCC_OscConfig+0x274>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9b6 	bl	8000b5c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f9b2 	bl	8000b5c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e15a      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fad8 	bl	8001dc8 <RCC_Delay>
 8001818:	e01c      	b.n	8001854 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_OscConfig+0x274>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff f99c 	bl	8000b5c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001826:	e00f      	b.n	8001848 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff f998 	bl	8000b5c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d908      	bls.n	8001848 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e140      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	42420000 	.word	0x42420000
 8001844:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e9      	bne.n	8001828 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a6 	beq.w	80019ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b97      	ldr	r3, [pc, #604]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a93      	ldr	r2, [pc, #588]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b8e      	ldr	r3, [pc, #568]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b8b      	ldr	r3, [pc, #556]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a8a      	ldr	r2, [pc, #552]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f959 	bl	8000b5c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff f955 	bl	8000b5c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0fd      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x312>
 80018d4:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	e02d      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x334>
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	e01c      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x356>
 800190c:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a6c      	ldr	r2, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a66      	ldr	r2, [pc, #408]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a63      	ldr	r2, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d015      	beq.n	8001972 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff f909 	bl	8000b5c <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff f905 	bl	8000b5c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0ab      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ee      	beq.n	800194e <HAL_RCC_OscConfig+0x37e>
 8001970:	e014      	b.n	800199c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f8f3 	bl	8000b5c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f8ef 	bl	8000b5c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e095      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a2:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8081 	beq.w	8001aba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d061      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d146      	bne.n	8001a5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f8c3 	bl	8000b5c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff f8bf 	bl	8000b5c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e067      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	492d      	ldr	r1, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a19      	ldr	r1, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	430b      	orrs	r3, r1
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f893 	bl	8000b5c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f88f 	bl	8000b5c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e037      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46a>
 8001a58:	e02f      	b.n	8001aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f87c 	bl	8000b5c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f878 	bl	8000b5c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e020      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x498>
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e013      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42420060 	.word	0x42420060

08001ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d0      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4965      	ldr	r1, [pc, #404]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e073      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4936      	ldr	r1, [pc, #216]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7fe ffcc 	bl	8000b5c <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7fe ffc8 	bl	8000b5c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e053      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1cc>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe ff2a 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08002be0 	.word	0x08002be0
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b490      	push	{r4, r7}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cac:	1d3c      	adds	r4, r7, #4
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb4:	f240 2301 	movw	r3, #513	; 0x201
 8001cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x46>
 8001ce2:	e02d      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce6:	623b      	str	r3, [r7, #32]
      break;
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	0c5b      	lsrs	r3, r3, #17
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d16:	4413      	add	r3, r2
 8001d18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d22:	fb02 f203 	mul.w	r2, r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	e004      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	623b      	str	r3, [r7, #32]
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d42:	623b      	str	r3, [r7, #32]
      break;
 8001d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d46:	6a3b      	ldr	r3, [r7, #32]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc90      	pop	{r4, r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	08002bd0 	.word	0x08002bd0
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000008 	.word	0x20000008

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08002bf0 	.word	0x08002bf0

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08002bf0 	.word	0x08002bf0

08001dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <RCC_Delay+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <RCC_Delay+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a5b      	lsrs	r3, r3, #9
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de4:	bf00      	nop
  }
  while (Delay --);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <RCC_Delay+0x1c>
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03f      	b.n	8001e96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fc74 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fde3 	bl	8002a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b08a      	sub	sp, #40	; 0x28
 8001ea2:	af02      	add	r7, sp, #8
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d17c      	bne.n	8001fb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_UART_Transmit+0x2c>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e075      	b.n	8001fba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_UART_Transmit+0x3e>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e06e      	b.n	8001fba <HAL_UART_Transmit+0x11c>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2221      	movs	r2, #33	; 0x21
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ef2:	f7fe fe33 	bl	8000b5c <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d108      	bne.n	8001f20 <HAL_UART_Transmit+0x82>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	e003      	b.n	8001f28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f30:	e02a      	b.n	8001f88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fb54 	bl	80025ea <UART_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e036      	b.n	8001fba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10b      	bne.n	8001f6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3302      	adds	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e007      	b.n	8001f7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1cf      	bne.n	8001f32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fb24 	bl	80025ea <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e006      	b.n	8001fba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d11d      	bne.n	8002018 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_UART_Receive_DMA+0x26>
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e016      	b.n	800201a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_UART_Receive_DMA+0x38>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00f      	b.n	800201a <HAL_UART_Receive_DMA+0x58>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	461a      	mov	r2, r3
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fb36 	bl	8002680 <UART_Start_Receive_DMA>
 8002014:	4603      	mov	r3, r0
 8002016:	e000      	b.n	800201a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b21      	cmp	r3, #33	; 0x21
 800204e:	d116      	bne.n	800207e <HAL_UART_DMAStop+0x5c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d013      	beq.n	800207e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002064:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe ff43 	bl	8000efe <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fb65 	bl	8002748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b22      	cmp	r3, #34	; 0x22
 800209e:	d116      	bne.n	80020ce <HAL_UART_DMAStop+0xac>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d013      	beq.n	80020ce <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe ff1b 	bl	8000efe <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fb52 	bl	8002772 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_UART_IRQHandler+0x52>
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fbcc 	bl	80028c0 <UART_Receive_IT>
      return;
 8002128:	e17b      	b.n	8002422 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80b1 	beq.w	8002294 <HAL_UART_IRQHandler+0x1bc>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_UART_IRQHandler+0x70>
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80a6 	beq.w	8002294 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_UART_IRQHandler+0x90>
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_UART_IRQHandler+0xb0>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_UART_IRQHandler+0xd0>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f043 0204 	orr.w	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00f      	beq.n	80021d2 <HAL_UART_IRQHandler+0xfa>
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_UART_IRQHandler+0xee>
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0208 	orr.w	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 811e 	beq.w	8002418 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_UART_IRQHandler+0x11e>
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fb65 	bl	80028c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <HAL_UART_IRQHandler+0x146>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d031      	beq.n	8002282 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 faa7 	bl	8002772 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002240:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	2b00      	cmp	r3, #0
 8002248:	d013      	beq.n	8002272 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	4a76      	ldr	r2, [pc, #472]	; (8002428 <HAL_UART_IRQHandler+0x350>)
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe8c 	bl	8000f74 <HAL_DMA_Abort_IT>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	e00e      	b.n	8002290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f8f5 	bl	8002462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002278:	e00a      	b.n	8002290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8f1 	bl	8002462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002280:	e006      	b.n	8002290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8ed 	bl	8002462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800228e:	e0c3      	b.n	8002418 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	bf00      	nop
    return;
 8002292:	e0c1      	b.n	8002418 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	2b01      	cmp	r3, #1
 800229a:	f040 80a1 	bne.w	80023e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 809b 	beq.w	80023e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8095 	beq.w	80023e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04e      	beq.n	8002378 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80022e4:	8a3b      	ldrh	r3, [r7, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8098 	beq.w	800241c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022f0:	8a3a      	ldrh	r2, [r7, #16]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f080 8092 	bcs.w	800241c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8a3a      	ldrh	r2, [r7, #16]
 80022fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b20      	cmp	r3, #32
 8002306:	d02b      	beq.n	8002360 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002316:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002336:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0210 	bic.w	r2, r2, #16
 8002354:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fdcf 	bl	8000efe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002368:	b29b      	uxth	r3, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f87f 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002376:	e051      	b.n	800241c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002380:	b29b      	uxth	r3, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d047      	beq.n	8002420 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002390:	8a7b      	ldrh	r3, [r7, #18]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0210 	bic.w	r2, r2, #16
 80023d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023d4:	8a7b      	ldrh	r3, [r7, #18]
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f84b 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023de:	e01f      	b.n	8002420 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_UART_IRQHandler+0x324>
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f9fc 	bl	80027f2 <UART_Transmit_IT>
    return;
 80023fa:	e012      	b.n	8002422 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <HAL_UART_IRQHandler+0x34a>
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fa3d 	bl	8002890 <UART_EndTransmit_IT>
    return;
 8002416:	e004      	b.n	8002422 <HAL_UART_IRQHandler+0x34a>
    return;
 8002418:	bf00      	nop
 800241a:	e002      	b.n	8002422 <HAL_UART_IRQHandler+0x34a>
      return;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <HAL_UART_IRQHandler+0x34a>
      return;
 8002420:	bf00      	nop
  }
}
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	080027cb 	.word	0x080027cb

0800242c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d12a      	bne.n	80024fc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0210 	bic.w	r2, r2, #16
 80024fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff ffb2 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002510:	e002      	b.n	8002518 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff ff93 	bl	800243e <HAL_UART_RxCpltCallback>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff ff97 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002546:	e002      	b.n	800254e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff81 	bl	8002450 <HAL_UART_RxHalfCpltCallback>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b21      	cmp	r3, #33	; 0x21
 8002588:	d108      	bne.n	800259c <UART_DMAError+0x46>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f000 f8d6 	bl	8002748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b22      	cmp	r3, #34	; 0x22
 80025bc:	d108      	bne.n	80025d0 <UART_DMAError+0x7a>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80025ca:	68b8      	ldr	r0, [r7, #8]
 80025cc:	f000 f8d1 	bl	8002772 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f043 0210 	orr.w	r2, r3, #16
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025dc:	68b8      	ldr	r0, [r7, #8]
 80025de:	f7ff ff40 	bl	8002462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fa:	e02c      	b.n	8002656 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d028      	beq.n	8002656 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <UART_WaitOnFlagUntilTimeout+0x30>
 800260a:	f7fe faa7 	bl	8000b5c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	429a      	cmp	r2, r3
 8002618:	d21d      	bcs.n	8002656 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002628:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e00f      	b.n	8002676 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0c3      	beq.n	80025fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2222      	movs	r2, #34	; 0x22
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <UART_Start_Receive_DMA+0xbc>)
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <UART_Start_Receive_DMA+0xc0>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <UART_Start_Receive_DMA+0xc4>)
 80026be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f7fe fbae 	bl	8000e40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002730:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800248b 	.word	0x0800248b
 8002740:	08002521 	.word	0x08002521
 8002744:	08002557 	.word	0x08002557

08002748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800275e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002788:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0210 	bic.w	r2, r2, #16
 80027b0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe3c 	bl	8002462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d13e      	bne.n	8002884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d114      	bne.n	800283a <UART_Transmit_IT+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e008      	b.n	800284c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6211      	str	r1, [r2, #32]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fdbb 	bl	800242c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	f040 8099 	bne.w	8002a08 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	d117      	bne.n	8002910 <UART_Receive_IT+0x50>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d113      	bne.n	8002910 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	b29a      	uxth	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	e026      	b.n	800295e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d007      	beq.n	8002934 <UART_Receive_IT+0x74>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <UART_Receive_IT+0x82>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e008      	b.n	8002954 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800294e:	b2da      	uxtb	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4619      	mov	r1, r3
 800296c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800296e:	2b00      	cmp	r3, #0
 8002970:	d148      	bne.n	8002a04 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0220 	bic.w	r2, r2, #32
 8002980:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d123      	bne.n	80029fa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0210 	bic.w	r2, r2, #16
 80029c6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d10a      	bne.n	80029ec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fd3e 	bl	8002474 <HAL_UARTEx_RxEventCallback>
 80029f8:	e002      	b.n	8002a00 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fd1f 	bl	800243e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e002      	b.n	8002a0a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a4e:	f023 030c 	bic.w	r3, r3, #12
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <UART_SetConfig+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a7c:	f7ff f990 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	e002      	b.n	8002a8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a84:	f7ff f978 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002a88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009a      	lsls	r2, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <UART_SetConfig+0x118>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	0119      	lsls	r1, r3, #4
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <UART_SetConfig+0x118>)
 8002ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	4419      	add	r1, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009a      	lsls	r2, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <UART_SetConfig+0x118>)
 8002afa:	fba3 0302 	umull	r0, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2064      	movs	r0, #100	; 0x64
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <UART_SetConfig+0x118>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	51eb851f 	.word	0x51eb851f

08002b30 <__libc_init_array>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2600      	movs	r6, #0
 8002b34:	4d0c      	ldr	r5, [pc, #48]	; (8002b68 <__libc_init_array+0x38>)
 8002b36:	4c0d      	ldr	r4, [pc, #52]	; (8002b6c <__libc_init_array+0x3c>)
 8002b38:	1b64      	subs	r4, r4, r5
 8002b3a:	10a4      	asrs	r4, r4, #2
 8002b3c:	42a6      	cmp	r6, r4
 8002b3e:	d109      	bne.n	8002b54 <__libc_init_array+0x24>
 8002b40:	f000 f830 	bl	8002ba4 <_init>
 8002b44:	2600      	movs	r6, #0
 8002b46:	4d0a      	ldr	r5, [pc, #40]	; (8002b70 <__libc_init_array+0x40>)
 8002b48:	4c0a      	ldr	r4, [pc, #40]	; (8002b74 <__libc_init_array+0x44>)
 8002b4a:	1b64      	subs	r4, r4, r5
 8002b4c:	10a4      	asrs	r4, r4, #2
 8002b4e:	42a6      	cmp	r6, r4
 8002b50:	d105      	bne.n	8002b5e <__libc_init_array+0x2e>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b58:	4798      	blx	r3
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	e7ee      	b.n	8002b3c <__libc_init_array+0xc>
 8002b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b62:	4798      	blx	r3
 8002b64:	3601      	adds	r6, #1
 8002b66:	e7f2      	b.n	8002b4e <__libc_init_array+0x1e>
 8002b68:	08002bf8 	.word	0x08002bf8
 8002b6c:	08002bf8 	.word	0x08002bf8
 8002b70:	08002bf8 	.word	0x08002bf8
 8002b74:	08002bfc 	.word	0x08002bfc

08002b78 <memcpy>:
 8002b78:	440a      	add	r2, r1
 8002b7a:	4291      	cmp	r1, r2
 8002b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b80:	d100      	bne.n	8002b84 <memcpy+0xc>
 8002b82:	4770      	bx	lr
 8002b84:	b510      	push	{r4, lr}
 8002b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b8a:	4291      	cmp	r1, r2
 8002b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b90:	d1f9      	bne.n	8002b86 <memcpy+0xe>
 8002b92:	bd10      	pop	{r4, pc}

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
